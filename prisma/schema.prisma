generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]

  carts Cart[]

  @@map("stores")
}

model Product {
  id        Int                         @id @default(autoincrement())
  name      String
  price     Float
  embedding Unsupported("vector(768)")? @map("embedding")

  storeId Int   @map("store_id")
  store   Store @relation(fields: [storeId], references: [id])

  cartItems CartItem[]

  @@map("products")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")

  carts        Cart[]
  chatSessions ChatSession[]

  @@map("users")
}

model Cart {
  id        Int      @id @default(autoincrement())
  active    Boolean  @default(true)
  score     Int?
  createdAt DateTime @default(now()) @map("created_at")

  suggestedByMessageId Int?         @map("suggested_by_message_id")
  message              ChatMessage? @relation(fields: [suggestedByMessageId], references: [id], onDelete: Cascade)
  userId               Int          @map("user_id")
  user                 User         @relation(fields: [userId], references: [id])
  storeId              Int          @map("store_id")
  store                Store        @relation(fields: [storeId], references: [id])

  items CartItem[]

  @@map("carts")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int      @default(1)
  createdAt DateTime @default(now()) @map("created_at")

  cartId    Int     @map("cart_id")
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@map("cart_items")
}

model ChatSession {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ChatMessage[]

  @@map("chat_sessions")
}

enum MessageSender {
  USER
  ASSISTANT
}

enum MessageType {
  TEXT
  SUGGESTION
}

model ChatMessage {
  id              Int           @id @default(autoincrement())
  content         String
  sender          MessageSender @default(USER)
  geminiMessageId String?       @unique @map("gemini_message_id")
  messageType     MessageType   @default(TEXT) @map("message_type")
  createdAt       DateTime      @default(now()) @map("created_at")

  chatSessionId Int                 @map("chat_session_id")
  chatSession   ChatSession         @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
  actions       ChatMessageAction[]
  carts          Cart[]

  @@map("chat_messages")
}

enum ActionType {
  SUGGEST_CART
}

model ChatMessageAction {
  id          Int        @id @default(autoincrement())
  actionType  ActionType @map("action_type")
  payload     Json
  createdAt   DateTime   @default(now()) @map("created_at")
  confirmedAt DateTime?  @map("confirmed_at")
  executedAt  DateTime?  @map("executed_at")

  chatMessageId Int         @map("chat_message_id")
  chatMessage   ChatMessage @relation(fields: [chatMessageId], references: [id], onDelete: Cascade)

  @@unique([chatMessageId, actionType])
  @@map("chat_message_actions")
}
